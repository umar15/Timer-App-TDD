[{"E:\\Bootcamp 2020\\timer-tdd\\src\\index.tsx":"1","E:\\Bootcamp 2020\\timer-tdd\\src\\App.tsx":"2","E:\\Bootcamp 2020\\timer-tdd\\src\\components\\Timer.tsx":"3","E:\\Bootcamp 2020\\timer-tdd\\src\\components\\TimerButton\\TimerButton.tsx":"4"},{"size":214,"mtime":1611152004390,"results":"5","hashOfConfig":"6"},{"size":202,"mtime":1611154446356,"results":"7","hashOfConfig":"6"},{"size":1370,"mtime":1611221351437,"results":"8","hashOfConfig":"6"},{"size":411,"mtime":1611221312938,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1vtxmvx",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Bootcamp 2020\\timer-tdd\\src\\index.tsx",[],["19","20"],"E:\\Bootcamp 2020\\timer-tdd\\src\\App.tsx",[],"E:\\Bootcamp 2020\\timer-tdd\\src\\components\\Timer.tsx",["21"],"E:\\Bootcamp 2020\\timer-tdd\\src\\components\\TimerButton\\TimerButton.tsx",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":14,"column":17,"nodeType":"28","endLine":26,"endColumn":12},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"react-hooks/exhaustive-deps","Assignments to the 'myInterval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation"]